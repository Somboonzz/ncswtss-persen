import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤12365

# ----------------------------------------------------------------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞ CSS
# ----------------------------------------------------------------------------------
st.set_page_config(page_title="HR Dashboard", layout="wide")

st.markdown("""
    <style>
        /* CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */
        div[data-testid="stDataframeHeader"] div {
            text-align: center !important;
            vertical-align: middle !important;
            justify-content: center !important;
        }
        
        div[data-testid="stDataframeCell"] {
            text-align: center !important;
            justify-content: center !important;
        }

        .stDataFrame {
            margin-left: 1rem;
            margin-right: 1rem;
        }
        /* Style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á */
        .detail-row {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            font-size: 14px;
        }
        .detail-header {
            font-weight: bold;
            border-bottom: 1px solid #ddd;
            padding-bottom: 2px;
            margin-bottom: 5px;
        }
        .col-date {
            width: 120px;
        }
        .col-time {
            width: 150px;
            font-weight: bold;
        }
        .col-type {
            font-weight: bold;
        }
    </style>
    """, unsafe_allow_html=True)

# ----------------------------------------------------------------------------------
# ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢
# ----------------------------------------------------------------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    return dt.strftime(f"%d/%m/{dt.year + 543}")

thai_months = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
]

def format_thai_month(period):
    year = period.year + 543
    month = thai_months[period.month - 1]
    return f"{month} {year}"

def parse_time(time_str):
    """‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á string ‡∏´‡∏£‡∏∑‡∏≠ datetime.time ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime.time object"""
    try:
        if pd.notna(time_str):
            if isinstance(time_str, datetime.time):
                return time_str
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô H:M:S
            dt_obj = pd.to_datetime(str(time_str), format='%H:%M:%S', errors='ignore')
            if not pd.isna(dt_obj):
                return dt_obj.time()
    except:
        try:
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô H:M
            dt_obj = pd.to_datetime(str(time_str), format='%H:%M', errors='ignore')
            if not pd.isna(dt_obj):
                return dt_obj.time()
        except:
            pass
    return None

# ----------------------------------------------------------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (Caching Level 1)
# ----------------------------------------------------------------------------------
@st.cache_data(ttl=300, show_spinner="‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
def load_data(file_path="attendances.xlsx"):
    try:
        if file_path and os.path.exists(file_path):
            df = pd.read_excel(file_path, engine='openpyxl', dtype={'‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô': str, '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô': str})
            return df
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel: attendances.xlsx")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return pd.DataFrame()

df_raw = load_data()

# ----------------------------------------------------------------------------------
# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Caching Level 2: ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å)
# ----------------------------------------------------------------------------------
@st.cache_data(ttl=3600, show_spinner="‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ...")
def preprocess_and_calculate_summary(df):
    if df.empty:
        return pd.DataFrame(), pd.DataFrame()

    df_base = df.copy()

    # --- ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ---
    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df_base.columns:
            df_base[col] = df_base[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)

    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df_base.columns:
        df_base["‡πÅ‡∏ú‡∏ô‡∏Å"] = df_base["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})

    if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" in df_base.columns:
        df_base["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df_base["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')
        df_base.dropna(subset=['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], inplace=True)
        if df_base.empty: return pd.DataFrame(), pd.DataFrame() # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ã‡πâ‡∏≥‡∏´‡∏•‡∏±‡∏á dropna
        
        df_base["‡∏õ‡∏µ"] = df_base["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.year + 543
        df_base["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df_base["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.to_period("M")
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å
    if '‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô' in df_base.columns:
        df_base['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'] = df_base['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'].apply(parse_time)
    
    if '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô' in df_base.columns:
        df_base['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'] = df_base['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'].apply(parse_time)

    # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ---
    def leave_days(row):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤ (1 ‡∏ß‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏´‡∏£‡∏∑‡∏≠ 0.5 ‡∏ß‡∏±‡∏ô)"""
        if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(row):
            return 0.5
        return 1

    df_base["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_base["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_base["‡∏Ç‡∏≤‡∏î"] = df_base["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_base["‡∏™‡∏≤‡∏¢"] = df_base["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)

    # 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å
    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢"] 
    summary = df_base.groupby(["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"])[leave_types].sum().reset_index()

    return df_base, summary

df, summary = preprocess_and_calculate_summary(df_raw)

# ----------------------------------------------------------------------------------
# ‡∏õ‡∏∏‡πà‡∏° Refresh ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
# ----------------------------------------------------------------------------------
if st.button("üîÑ Refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Manual)"):
    # ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ load_data ‡πÅ‡∏•‡∏∞ preprocess_and_calculate_summary ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    st.cache_data.clear() 
    st.rerun()

bangkok_now = datetime.datetime.now(pytz.utc).astimezone(bangkok_tz)
st.markdown(
    f"<div style='text-align:right; font-size:50px; color:#FF5733; font-weight:bold;'>"
    f"üóì {thai_date(bangkok_now)} | ‚è∞ {bangkok_now.strftime('%H:%M:%S')}</div>",
    unsafe_allow_html=True
)

# ----------------------------------------------------------------------------------
# Dashboard ‡∏´‡∏•‡∏±‡∏Å (‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
# ----------------------------------------------------------------------------------
if not df.empty:
    
    df_filtered = df.copy()
    summary_filtered = summary.copy()

    # --- Filter (‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏ô 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå) ---
    col1, col2, col3 = st.columns(3)
    
    with col1:
        years = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df["‡∏õ‡∏µ"].dropna().unique(), reverse=True)
        selected_year = st.selectbox("üìÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ", years)
        if selected_year != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            df_filtered = df_filtered[df_filtered["‡∏õ‡∏µ"] == int(selected_year)]

    with col2:
        if "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" in df_filtered.columns and not df_filtered.empty:
            available_months = sorted(df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique())
            month_options = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + [format_thai_month(m) for m in available_months]
            selected_month = st.selectbox("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", month_options)
            if selected_month != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
                mapping = {format_thai_month(m): str(m) for m in available_months}
                selected_period = mapping[selected_month]
                df_filtered = df_filtered[df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].astype(str) == selected_period]

    with col3:
        departments = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"].dropna().unique())
        selected_dept = st.selectbox("üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", departments)
        if selected_dept != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            df_filtered = df_filtered[df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"] == selected_dept]
    # -----------------------------------

    # --- ‡∏Å‡∏£‡∏≠‡∏á Summary (‡πÉ‡∏ä‡πâ merge ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ã‡πâ‡∏≥) ---
    # ‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á leave_types ‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á
    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢"]
    if not df_filtered.empty:
        summary_filtered = df_filtered.groupby(["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"])[leave_types].sum().reset_index()
    else:
        summary_filtered = pd.DataFrame(columns=["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"] + leave_types)
        
    st.title("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤ / ‡∏Ç‡∏≤‡∏î / ‡∏™‡∏≤‡∏¢")

    # --- ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ---
    if 'selected_employee' not in st.session_state:
        st.session_state.selected_employee = '-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --'
    all_names = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(summary_filtered["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].unique())
    selected_employee = st.selectbox("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", all_names, key='selected_employee')

    # --- ‡∏™‡∏µ‡∏Å‡∏£‡∏≤‡∏ü ---
    colors = {
        "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à": "#FFC300", 
        "‡∏Ç‡∏≤‡∏î": "#C70039", 
        "‡∏™‡∏≤‡∏¢": "#FF5733", 
    }

    # ----------------------------------------------------------------------------------
    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Tabs ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
    # ----------------------------------------------------------------------------------
    tabs = st.tabs(leave_types)
    for t, leave in zip(tabs, leave_types):
        with t:
            st.subheader(f"üèÜ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {leave}")
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ summary_filtered ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß)
            if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
                current_summary_display = summary_filtered[summary_filtered["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == selected_employee].reset_index(drop=True)
                person_data_full = df_filtered[df_filtered["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == selected_employee].reset_index(drop=True)
            else:
                current_summary_display = summary_filtered.reset_index(drop=True)
                person_data_full = df_filtered.reset_index(drop=True)

            # --- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ ---
            st.markdown("### üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
            st.dataframe(current_summary_display, use_container_width=True, hide_index=True)


            # --- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô) - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤ ---
            if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --" and not person_data_full.empty:
                if leave == "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à":
                    relevant_exceptions = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
                elif leave == "‡∏Ç‡∏≤‡∏î":
                    relevant_exceptions = ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
                else: # ‡∏™‡∏≤‡∏¢
                    relevant_exceptions = [leave]

                dates = person_data_full.loc[
                    person_data_full["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].isin(relevant_exceptions), ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]
                ].sort_values(by="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢
                total_days = dates.apply(lambda row: 0.5 if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(row['‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô']) else 1, axis=1).sum()
                if leave == "‡∏™‡∏≤‡∏¢":
                    total_count = dates.shape[0]

                if not dates.empty:
                    with st.expander(f"‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ({leave})"):
                        
                        # **‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô Header ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ**
                        
                        for _, row in dates.iterrows():
                            # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
                            date_str = row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].strftime('%d/%m/%Y')
                            exception_text = row['‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô']

                            entry_time_raw = row['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤']
                            exit_time_raw = row['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å']
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô 00:00 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏±‡∏ô
                            if exception_text in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î"]:
                                time_period = '00:00 - 00:00'
                            else:
                                entry_time = entry_time_raw.strftime('%H:%M') if entry_time_raw is not None else '00:00' # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô '-' ‡πÄ‡∏õ‡πá‡∏ô '00:00' ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
                                exit_time = exit_time_raw.strftime('%H:%M') if exit_time_raw is not None else '00:00' # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô '-' ‡πÄ‡∏õ‡πá‡∏ô '00:00' ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
                                time_period = f"{entry_time} - {exit_time}"
                            
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ Markdown (‡∏à‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
                            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô 
                            label = (
                                f"<div style='margin-bottom: 5px; font-size: 16px;'>"
                                f"‚Ä¢ {date_str}&nbsp;&nbsp;&nbsp;&nbsp;{time_period}&nbsp;&nbsp;&nbsp;&nbsp;{exception_text}"
                                f"</div>"
                            )
                            st.markdown(label, unsafe_allow_html=True)
                            
                        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô
                        st.markdown("<hr>", unsafe_allow_html=True)
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°)
                        if leave == "‡∏™‡∏≤‡∏¢":
                            st.markdown(f"<div style='font-weight: bold; font-size: 16px; margin-top: 10px;'>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</div>", unsafe_allow_html=True)
                        else:
                            st.markdown(f"<div style='font-weight: bold; font-size: 16px; margin-top: 10px;'>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_days:.0f} ‡∏ß‡∏±‡∏ô</div>", unsafe_allow_html=True) # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô .0f ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û


            # --- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö ---
            ranking = current_summary_display[["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", leave]].sort_values(by=leave, ascending=False).reset_index(drop=True)
            ranking.insert(0, "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", range(1, len(ranking) + 1))
            
            # ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
            if not ranking.empty:
                ranking = ranking.iloc[:-1]
                
            st.markdown("### üèÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö")
            st.dataframe(ranking, use_container_width=True, hide_index=True)

    # ----------------------------------------------------------------------------------
    # Pie Chart
    # ----------------------------------------------------------------------------------
    st.markdown("---")
    st.subheader("ü•ß ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠ + ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)")

    total_summary = summary_filtered[leave_types].sum().reset_index()
    total_summary.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°']
    total_summary = total_summary[total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'] > 0].reset_index(drop=True)

    if total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'].sum() > 0:
        total = total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'].sum()
        total_summary['Percentage'] = (total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'] / total * 100).round(1)
        total_summary['label'] = total_summary.apply(lambda x: f"{x['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó']} {x['Percentage']}%", axis=1)

        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á base chart
        base = alt.Chart(total_summary).encode(
            theta=alt.Theta("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", stack=True),
            color=alt.Color(
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
                scale=alt.Scale(domain=list(colors.keys()), range=list(colors.values()))
            ),
            order=alt.Order("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", sort="descending"), 
            tooltip=[
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
                alt.Tooltip("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", format=".1f", title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)"),
                alt.Tooltip("Percentage", format=".1f", title="‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)")
            ]
        )

        # 2. ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏´‡∏•‡∏±‡∏Å
        pie = base.mark_arc(outerRadius=170, innerRadius=60)

        # 3. Text Label (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å)
        text_labels = base.mark_text(
            radius= 250, # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ radius ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            size=15, 
            fontWeight="bold",
        ).encode(
            text=alt.Text('label:N'),
            color=alt.Color('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:N', scale=alt.Scale(domain=list(colors.keys()), range=list(colors.values()))),
            tooltip=alt.value(None)
        )

        # 4. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°
        center_text = alt.Chart(pd.DataFrame({'text': [f"‡∏£‡∏ß‡∏° 100%"]})).mark_text(
            size=20, color='black', fontWeight='bold'
        ).encode(text='text:N')

        # ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô
        chart = pie + text_labels + center_text
        
        chart = chart.properties(
            width=500,
            height=500,
            title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢"
        ).configure_legend(
            titleFontSize=14,
            labelFontSize=12
        ).configure_title(
            fontSize=18
        )

        st.altair_chart(chart, use_container_width=True)

        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ Pie Chart
        # ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ Pie Chart
        if not total_summary.empty:
            total_summary_display = total_summary.iloc[:-1]
        else:
            total_summary_display = total_summary
            
        st.dataframe(total_summary_display, use_container_width=True, hide_index=True)

    else:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå attendances.xlsx ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")